#!/usr/bin/env python3

import yaml
import datetime
import re
import argparse
from bs4 import BeautifulSoup
import os


def create_id(term):
    """Creëert een id op basis van de voorkeursterm door deze te normaliseren:
    - Alles naar kleine letters
    - Spaties en speciale tekens vervangen door underscore
    - Meerdere underscores samenvoegen
    """
    # Naar kleine letters omzetten
    id_str = term.lower()
    # Vervang spaties en speciale tekens door underscores
    id_str = re.sub(r"[^a-z0-9]", "_", id_str)
    # Vervang meerdere opeenvolgende underscores door één
    id_str = re.sub(r"_+", "_", id_str)
    # Verwijder leading/trailing underscores
    id_str = id_str.strip("_")
    return id_str


def html_to_yaml(html_file, output_yaml_file, existing_yaml_file=None):
    """
    Parses HTML file with begrippen and converts to YAML format.
    If existing_yaml_file is provided, it will merge with existing terms.
    """
    # Read existing YAML if provided
    existing_begrippen = []
    existing_ids = set()
    if existing_yaml_file and os.path.exists(existing_yaml_file):
        with open(existing_yaml_file, 'r', encoding='utf-8') as f:
            existing_yaml = yaml.safe_load(f)
            if 'definitions' in existing_yaml:
                existing_begrippen = existing_yaml['definitions']
                existing_ids = {begriff['id'] for begriff in existing_begrippen}
    
    # Parse HTML file
    with open(html_file, 'r', encoding='utf-8') as f:
        soup = BeautifulSoup(f, 'html.parser')
    
    new_begrippen = []
    
    # Find all section elements that contain terms
    term_sections = soup.select('section[id]')
    
    for section in term_sections:
        # Skip sections without proper structure
        h4 = section.select_one('h4')
        if not h4:
            continue
            
        blockquote = section.select_one('blockquote p')
        if not blockquote:
            continue
        
        # Extract term, category, and definition
        # Remove section numbers (e.g., "2.2.9 DPIA opslaglocatie" -> "DPIA opslaglocatie")
        term_text = h4.get_text().strip()
        # Remove section numbering (like "2.2.9 ")
        term = re.sub(r'^\d+(\.\d+)*\s+', '', term_text)
        
        # Find the category by looking at the parent sections
        category = "00. Algemeen"  # Default category
        parent_section = section.parent
        while parent_section and parent_section.name == 'section':
            parent_h3 = parent_section.select_one('h3')
            if parent_h3 and 'DPIA - ' in parent_h3.get_text():
                category_text = parent_h3.get_text().strip()
                # Extract just the category part after "DPIA - "
                if 'DPIA - ' in category_text:
                    category = category_text.split('DPIA - ')[1]
                break
            parent_section = parent_section.parent
        
        # Get the definition from the blockquote
        definition = blockquote.get_text().strip()
        
        # Look for Toelichting paragraph and append it to the definition if found
        toelichting_p = section.select_one('p:-soup-contains("Toelichting:")')
        if toelichting_p:
            definition += ". \n\n" + toelichting_p.get_text().strip()
            print(f'Found Toelichting for "{term}"')
        
        # Create ID based on the cleaned term (without section numbers)
        id_value = create_id(term)
        
        # Skip if this ID already exists in the existing YAML
        if id_value in existing_ids:
            print(f"Skipping '{term}' as it already exists in the YAML file.")
            continue
        
        begriff = {
            "id": id_value,
            "term": term,
            "category": category,
            "definition": definition,
        }
        
        new_begrippen.append(begriff)
    
    # Combine existing and new begrippen
    all_begrippen = existing_begrippen + new_begrippen
    
    # Sort all begrippen by ID
    all_begrippen.sort(key=lambda x: x["id"])
    
    # Create YAML structure
    if existing_yaml_file and os.path.exists(existing_yaml_file):
        # Update existing structure with new terms
        with open(existing_yaml_file, 'r', encoding='utf-8') as f:
            begrippenkader = yaml.safe_load(f)
        begrippenkader['definitions'] = all_begrippen
    else:
        # Create new structure
        begrippenkader = create_yaml_structure(all_begrippen)
    
    # Write to YAML file
    write_yaml_to_file(begrippenkader, output_yaml_file)
    
    print(f"Bestand '{output_yaml_file}' is bijgewerkt met {len(new_begrippen)} nieuwe begrippen.")
    print(f"Totaal aantal begrippen: {len(all_begrippen)}")


def create_yaml_structure(begrippen):
    """Creates a YAML structure with the provided terms"""
    return {
        "schema_version": "1.0.0",
        "name": "Begrippenkader",
        "description": "Het begrippenkader is lijst met definities van begrippen die worden gebruikt in de DPIA. Het begrippenkader is ontwikkeld door J&V. Elke term heeft een id, naam, category (vraag DPIA) en een definitie.",
        "urn": "urn:nl:dpia:3.0:begrippenkader:1.0",
        "language": "nl",
        "owners": [
            {
                "organization": "Ministerie van BZK",
                "name": "CIO Rijk",
                "email": "privacy-ciorijk@minbzk.nl",
                "role": "Privacy Officer",
            }
        ],
        "definitions": begrippen,
        "metadata": {
            "version": "1.0.0",
            "last_updated": datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S"),
            "maintainer": "CIO Rijk",
            "language": "nl",
        },
    }


def write_yaml_to_file(begrippenkader, output_file):
    """Writes the YAML structure to a file"""
    with open(output_file, "w", encoding="utf-8") as f:
        # Voeg een multiline string indicator toe voor de description (>-)
        yaml_text = yaml.dump(begrippenkader, default_flow_style=False, allow_unicode=True, sort_keys=False)
        # Handmatig toevoegen van >- voor description
        yaml_text = yaml_text.replace("description: '", "description: >-\n  ")
        f.write(yaml_text)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Convert HTML to YAML begrippenkader')
    parser.add_argument('--input', required=True, help='Input file (HTML)')
    parser.add_argument('--output', required=True, help='Output YAML file')
    parser.add_argument('--existing', help='Existing YAML file to merge with (for HTML only)', default=None)
    
    args = parser.parse_args()
    
    html_to_yaml(args.input, args.output, args.existing)