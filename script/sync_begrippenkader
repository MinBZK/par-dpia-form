#!/usr/bin/env python3

import csv
import yaml
import datetime
import re


def create_id(term):
    """Creëert een id op basis van de voorkeursterm door deze te normaliseren:
    - Alles naar kleine letters
    - Spaties en speciale tekens vervangen door underscore
    - Meerdere underscores samenvoegen
    """
    # Naar kleine letters omzetten
    id_str = term.lower()
    # Vervang spaties en speciale tekens door underscores
    id_str = re.sub(r"[^a-z0-9]", "_", id_str)
    # Vervang meerdere opeenvolgende underscores door één
    id_str = re.sub(r"_+", "_", id_str)
    # Verwijder leading/trailing underscores
    id_str = id_str.strip("_")
    return id_str


def csv_to_yaml(csv_file, output_yaml_file):
    # Lees de CSV in
    with open(csv_file, "r", encoding="utf-8") as f:
        # Lees CSV met puntkomma als scheidingsteken
        reader = csv.reader(f, delimiter=";")

        # Lees de header (eerste rij)
        header = next(reader)

        begrippen = []

        # Verwerk elke rij in de CSV
        for row in reader:
            if len(row) >= 3:  # Controleer of we voldoende kolommen hebben
                voorkeursterm = row[0].strip()
                hoofdonderwerp = row[1].strip()
                definitie = row[2].strip()

                # Genereer ID op basis van de voorkeursterm
                id_value = create_id(voorkeursterm)

                begrip = {
                    "id": id_value,
                    "name": voorkeursterm,
                    "category": hoofdonderwerp.replace("DPIA - ", ""),
                    "definition": definitie,
                }

                # Voeg alleen begrippen toe met een definitie
                if begrip["definition"]:
                    begrippen.append(begrip)

    # Sorteer de begrippen op ID
    begrippen.sort(key=lambda x: x["id"])

    # Creëer de YAML-structuur
    begrippenkader = {
        "schema_version": "1.0.0",
        "name": "Begrippenkader",
        "description": "Het begrippenkader is lijst met definities van begrippen die worden gebruikt in de DPIA. Het begrippenkader is ontwikkeld door J&V. Elke term heeft een id, naam, category (vraag DPIA) en een definitie.",
        "urn": "urn:nl:dpia:3.0:begrippenkader:1.0",
        "language": "nl",
        "owners": [
            {
                "organization": "Ministerie van BZK",
                "name": "CIO Rijk",
                "email": "privacy-ciorijk@minbzk.nl",
                "role": "Privacy Officer",
            }
        ],
        "glossary": begrippen,
        "metadata": {
            "version": "1.0.0",
            "last_updated": datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S%z"),
            "maintainer": "CIO Rijk",
            "language": "nl",
        },
    }

    # Schrijf naar YAML bestand
    with open(output_yaml_file, "w", encoding="utf-8") as f:
        # Voeg een multiline string indicator toe voor de description (>-)
        yaml_text = yaml.dump(begrippenkader, default_flow_style=False, allow_unicode=True, sort_keys=False)
        # Handmatig toevoegen van >- voor description
        yaml_text = yaml_text.replace("description: '", "description: >-\n  ")
        f.write(yaml_text)

    print(f"Bestand '{output_yaml_file}' is succesvol aangemaakt met {len(begrippen)} begrippen.")


if __name__ == "__main__":
    input_file = "sources/datamodel/Begrippenkader_kort.csv"
    output_file = "sources/begrippenkader.yaml"

    csv_to_yaml(input_file, output_file)
